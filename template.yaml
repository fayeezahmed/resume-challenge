AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  resumeChallenge
  Sample SAM Template for resumeChallenge

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: Active
    Environment:
      Variables:
        TABLE_NAME: fayeez-resume-table
  Api:
    TracingEnabled: True
Parameters:
  RootDomainName:
    Default: fayeezresumechallenge.com
    Description: Domain name for your website (example.com)
    Type: String


# More info on mappings: https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints
Mappings:
  RegionMap:
    eu-west-1:
      S3hostedzoneID: Z1BKCTXD74EZPE
      websiteendpoint: s3-website-eu-west-1.amazonaws.com
    eu-west-2:
      S3hostedzoneID: Z3GKZC51ZF0DB4
      websiteendpoint: s3-website.eu-west-2.amazonaws.com

Resources:
  DomainCertificate: 
    Type: "AWS::CertificateManager::Certificate"
    Properties: 
      DomainName: '*.fayeezresumechallenge.com'
      ValidationMethod: DNS

  FayeezResumeFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable
      Events:
        FayeezResume:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth:
              Authorizer: null
            Path: /hit
            Method: post
            RequestParameters:
              - method.request.header.Access-Control-Allow-Origin
  MyTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: MyPrimaryKey
        Type: String
      TableName: fayeez-resume-table

  FrontEndBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref RootDomainName
      AccessControl: PublicRead
      MetricsConfigurations:
        - Id: EntireBucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
        RoutingRules:
          - RoutingRuleCondition:
              HttpErrorCodeReturnedEquals: '404'
              KeyPrefixEquals: out1/
            RedirectRule:
              HostName: !Ref RootDomainName
              ReplaceKeyPrefixWith: report-404/
    DeletionPolicy: Retain

  WWWBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
          - www.${Domain}
          - Domain: !Ref RootDomainName
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref FrontEndBucket

  FrontEndBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontEndBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${FrontEndBucket}
              - !Sub arn:aws:s3:::${FrontEndBucket}/*
            Principal:
              AWS:
                - '*'

  myDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub 
          - ${Domain}.
          - Domain: !Ref RootDomainName
      Comment: Zone apex alias.
      RecordSets:
      - 
        Name: !Ref RootDomainName
        Type: A
        AliasTarget:
          HostedZoneId: !FindInMap [ RegionMap, !Ref 'AWS::Region', S3hostedzoneID]
          DNSName: !FindInMap [ RegionMap, !Ref 'AWS::Region', websiteendpoint]
      -
        Name: !Sub
            - www.${Domain}
            - Domain: !Ref RootDomainName
        Type: A
        AliasTarget:
          HostedZoneId: !FindInMap [ RegionMap, !Ref 'AWS::Region', S3hostedzoneID]
          DNSName: !FindInMap [ RegionMap, !Ref 'AWS::Region', websiteendpoint]

              #Type: CNAME
              #TTL: 60
              #ResourceRecords:
              #- !GetAtt WWWBucket.RegionalDomainName

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  FayeezResumeApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  FayeezResumeFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt FayeezResumeFunction.Arn
  FayeezResumeFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt FayeezResumeFunctionRole.Arn
  FrontEndBuckWebsiteURL:
    Value: !GetAtt FrontEndBucket.WebsiteURL
    Description: URL for website hosted on S3
  FayeezResumeChallengeBucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt FrontEndBucket.DomainName
    Description: Name of S3 bucket to hold website content
  WWWDomainNameURL:
    Value: !GetAtt WWWBucket.DomainName
  RootDomainName:
    Value: !Ref RootDomainName
    
# 172800
